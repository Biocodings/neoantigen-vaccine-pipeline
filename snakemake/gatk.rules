"""
This contains GATK-related processing rules.
"""

rule mark_dups:
  input:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  benchmark:
    "{prefix}_mark_dups_benchmark.txt"
  log:
    "{prefix}_mark_dups.log"
  shell:
    "TMPDIR={wildcards.prefix}_tmp "
    "MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP=50000 "
    "MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=20000 "
    "SORTING_COLLECTION_SIZE_RATIO=0.250000 "
    "picard -Xmx20g -Djava.io.tmpdir={wildcards.prefix}_tmp "
    "MarkDuplicates "
    "INPUT={input} OUTPUT={output} "
    "VALIDATION_STRINGENCY=LENIENT METRICS_FILE={wildcards.prefix}_markdups_metrics.txt "
    "2> {log}"

rule index_mark_dups:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups.bam.bai"
  shell:
    "samtools index {input}"

rule indel_realigner_target_creator_joint:
  input:
    expand("{{prefix}}/{type}_aligned_coordinate_sorted_dups.bam.bai", type=["normal", "tumor"]),
    normal = "{prefix}/normal_aligned_coordinate_sorted_dups.bam",
    tumor = "{prefix}/tumor_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}/aligned_coordinate_sorted_dups_indelreal.intervals"
  threads: 12
  params:
    reference = config["reference"]["genome"]
  benchmark:
    "{prefix}/indel_realigner_target_creator_benchmark.txt"
  log:
    "{prefix}/indel_realigner_target_creator.log"
  shell:
    "gatk -Xmx20g -T RealignerTargetCreator -R {params.reference} -o {output} "
    "-I {input.normal} -I {input.tumor}  -nt {threads} "
    "--filter_reads_with_N_cigar --filter_mismatching_base_and_quals --filter_bases_not_stored "
    "2> {log}"

# hackiest thing ever: constructs an intervals filename based on the path from the prefix.
# Assumes that the prefix directory contains the intervals file.
def get_intervals_from_prefix(wildcards):
  return os.path.join(
    os.path.dirname(wildcards.prefix),
    "aligned_coordinate_sorted_dups_indelreal.intervals")

rule indel_realigner:
  input:
    bam = "{prefix}_aligned_coordinate_sorted_dups.bam",
    intervals = get_intervals_from_prefix
  output:
    "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam"
  params:
    reference = config["reference"]["genome"]
  benchmark:
    "{prefix}_indel_realigner_benchmark.txt"
  log:
    "{prefix}_indel_realigner.log"
  shell:
    "gatk -Xmx20g -T IndelRealigner -compress 0 -R {params.reference} -I {input.bam} "
    "-targetIntervals {input.intervals} -o {output} "
    "--filter_reads_with_N_cigar --filter_mismatching_base_and_quals --filter_bases_not_stored "
    "2> {log}"

rule base_recalibrator:
  input:
    "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.table"
  params:
    reference = config["reference"]["genome"],
    known_sites = config["reference"]["dbsnp"]
  threads: 12
  benchmark:
    "{prefix}_base_recalibrator_benchmark.txt"
  log:
    "{prefix}_base_recalibrator.log"
  shell:
    "gatk -Xmx20g -T BaseRecalibrator -nct {threads} -I {input} -R {params.reference} "
    "-knownSites {params.known_sites} -o {output} 2> {log}"

rule bqsr_print_reads:
  input:
    bam = "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam",
    bqsr = "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.table"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.bam"
  params:
    reference = config["reference"]["genome"]
  threads: 12
  benchmark:
    "{prefix}_base_recalibrator_print_reads_benchmark.txt"
  log:
    "{prefix}_base_recalibrator_print_reads.log"
  shell:
    "gatk -Xmx20g "
    "-T PrintReads -nct {threads} -R {params.reference} -I {input.bam} -BQSR {input.bqsr} "
    "-o {output} 2> {log}"
