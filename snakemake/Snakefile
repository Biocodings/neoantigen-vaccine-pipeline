"""
To see how Snakemake behaves with certain commands given the current config.json, 
try these examples:

Print jobs (and their shell commands) required to produce an aligned tumor DNA file:
snakemake -s fastq_fragment_Snakefile -np /data/smoking-sigs/workdir/5/tumor_aligned.sam --cores=24

Print jobs (and their shell commands) required to produce the MuTect2 output:
snakemake -s fastq_fragment_Snakefile -np /data/smoking-sigs/workdir/5/mutect.vcf --cores=24

To see a DAG of all the jobs:
snakemake --dag /data/smoking-sigs/workdir/5/mutect.vcf -s fastq_fragment_Snakefile | dot -Tsvg > ~/Desktop/dag.svg

Note that these commands need to be run from this directory. Also, this file needs a configfile
(passed as --configfile to the snakemake command) with data of the form:

{
    "workdir": "path/to/workdir",
    "input": {
        "id": "some-id",
        "normal": [
            {
                "fragment_id": "L1",
                "r1": "path/to/normal_L1_R1.fastq.gz",
                "r2": "path/to/normal_L1_R2.fastq.gz"
            },
            {
                "fragment_id": "L2",
                "r1": "path/to/normal_L2_R1.fastq.gz",
                "r2": "path/to/normal_L2_R2.fastq.gz"
            }
        ],
        "tumor": [
            {
                "fragment_id": "L1",
                "r1": "path/to/tumor_L1_R1.fastq.gz",
                "r2": "path/to/tumor_L1_R2.fastq.gz"
            },
            {
                "fragment_id": "L2",
                "r1": "path/to/tumor_L2_R1.fastq.gz",
                "r2": "path/to/tumor_L2_R2.fastq.gz"
            }
        ]
    },
    "reference": {
        "genome": "path/to/genome.fasta",
        "dbsnp": "path/to/dbsnp.vcf"
    }
}

The files listed in this config have to exist.

"""

import os
from shutil import copy2
import subprocess

include:
    "common.rules"
include:
    "reference.rules"
include:
    "gatk.rules"
include:
    "alignment.rules"
include:
    "rna.rules"
include:
    "variant_calling.rules"
include:
    "special_sauce.rules"

# copy all fragments over to the sample-specific workdir, create if it doesn't exist
if not os.path.exists(WORKDIR):
  os.makedirs(WORKDIR)

FRAGMENT_IDS = {
  "normal": set(),
  "tumor": set(),
  "rna": set()
}

# support any type of paired-end and single-end input, figure out what kind of input it is,
# copy over with a predictable name. Naming convention for files in workdir: normal_L1_R1.fastq.gz
# TODO(julia): make sure alignment works with any of those start points
def _determine_filetype(filename):
  for supported_filetype in SUPPORTED_FILETYPES:
    if filename.endswith(supported_filetype):
      return supported_filetype
  raise ValueError("Unsupported filetype in %s", filename)

for input_type in ["normal", "tumor", "rna"]:
  if input_type not in config["input"]:
    continue
  for fragment in config["input"][input_type]:
    FRAGMENT_IDS[input_type].add(fragment["fragment_id"])

    if fragment["type"] == "paired-end":
      # TODO(julia): this assumes split FASTQs, which might not be the case: we might see a single
      # interleaved FASTQ someday. Worry about this later
      for read in [1, 2]:
        source = fragment["r%d" % read]
        filetype = _determine_filetype(source)
        # if the files already exist, don't copy anew
        dest = os.path.join(WORKDIR,
          "%s_%s_R%d%s" % (input_type, fragment["fragment_id"], read, filetype))
        if not (os.path.exists(dest)):
          print('Copying %s to %s' % (source, dest))
          if source.startswith("gs://"):
            # use gsutil cp to copy
            # is this any less safe than snakemake's "shell" directive?
            subprocess.call("gsutil -m cp %s %s" % (source, dest), shell=True)
          else:
            copy2(source, dest)

    elif fragment["type"] == "single-end":
      source = fragment["r"]
      filetype = _determine_filetype(source)
      # if the files already exist, don't copy anew
      dest = os.path.join(WORKDIR, "%s_%s%s" % (input_type, fragment["fragment_id"], filetype))
      if not os.path.exists(dest):
        print('Copying %s to %s' % (source, dest))
        if source.startswith("gs://"):
          subprocess.call("gsutil -m cp %s %s" % (source, dest), shell=True)
        else:
          copy2(source, dest)

    else:
      raise ValueError("Unsupported input type: expected single-end or paired-end")


# merge a bunch of BAMs into one thing
rule merge_normal_aligned_fragments:
  input:
    expand("{{prefix}}_{fragment_id}_aligned_coordinate_sorted.bam",
      fragment_id=FRAGMENT_IDS["normal"])
  output:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  wildcard_constraints:
    prefix=".*normal.*"
  run:
    if len(input) > 1:
      shell("sambamba merge {output} {input}")
    else:
      shell("cp {input} {output}")

rule merge_tumor_aligned_fragments:
  input:
    expand("{{prefix}}_{fragment_id}_aligned_coordinate_sorted.bam",
      fragment_id=FRAGMENT_IDS["tumor"])
  output:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  wildcard_constraints:
    prefix=".*tumor.*"
  run:
    if len(input) > 1:
      shell("sambamba merge {output} {input}")
    else:
      shell("cp {input} {output}")

rule merge_rna_aligned_fragments:
  input:
    expand("{{prefix}}_{fragment_id}Aligned.sortedByCoord.out.bam",
      fragment_id=FRAGMENT_IDS["rna"])
  output:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  wildcard_constraints:
    prefix=".*rna.*"
  benchmark:
    "{prefix}_merge_rna_aligned_fragments_benchmark.txt"
  log:
    "{prefix}_merge_rna_aligned_fragments.log"
  threads: 12
  run:
    if len(input) > 1:
      shell("sambamba merge -t {threads} {output} {input} 2> {log}")
    else:
      shell("cp {input} {output}")
