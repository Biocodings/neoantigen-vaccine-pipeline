"""
To see how Snakemake behaves with certain commands given the current config.json, 
try these examples:

Print jobs (and their shell commands) required to produce an aligned tumor DNA file:
snakemake -s fastq_fragment_Snakefile -np /data/smoking-sigs/workdir/5/tumor_aligned.sam --cores=24

Print jobs (and their shell commands) required to produce the MuTect2 output:
snakemake -s fastq_fragment_Snakefile -np /data/smoking-sigs/workdir/5/mutect.vcf --cores=24

To see a DAG of all the jobs:
snakemake --dag /data/smoking-sigs/workdir/5/mutect.vcf -s fastq_fragment_Snakefile | dot -Tsvg > ~/Desktop/dag.svg

Note that these commands need to be run from this directory. Also, this file needs a configfile
(passed as --configfile to the snakemake command) with data of the form:

{
    "workdir": "path/to/workdir",
    "input": {
        "id": "some-id",
        "normal": [
            {
                "fragment_id": "L1",
                "r1": "path/to/normal_L1_R1.fastq.gz",
                "r2": "path/to/normal_L1_R2.fastq.gz"
            },
            {
                "fragment_id": "L2",
                "r1": "path/to/normal_L2_R1.fastq.gz",
                "r2": "path/to/normal_L2_R2.fastq.gz"
            }
        ],
        "tumor": [
            {
                "fragment_id": "L1",
                "r1": "path/to/tumor_L1_R1.fastq.gz",
                "r2": "path/to/tumor_L1_R2.fastq.gz"
            },
            {
                "fragment_id": "L2",
                "r1": "path/to/tumor_L2_R1.fastq.gz",
                "r2": "path/to/tumor_L2_R2.fastq.gz"
            }
        ]
    },
    "reference": {
        "genome": "path/to/genome.fasta",
        "dbsnp": "path/to/dbsnp.vcf"
    }
}

The files listed in this config have to exist.

"""

import os
from shutil import copy2

include:
    "gatk.rules"
include:
    "alignment.rules"
include:
    "rna.rules"
include:
    "variant_calling.rules"
include:
    "special_sauce.rules"

SAMPLE_ID = config["input"]["id"]
WORKDIR = os.path.join(config["workdir"], SAMPLE_ID)

CHR = list(range(1, 23)) + ['X', 'Y', 'MT']

# copy all fragments over to the sample-specific workdir, create if it doesn't exist
if not os.path.exists(WORKDIR):
  os.makedirs(WORKDIR)

FRAGMENT_IDS = {
  "normal": set(),
  "tumor": set(),
  "rna": set()
}

# naming convention for files in workdir: normal_L1_R1.fastq.gz
# Assume that all inputs are fastq.gz files.
for input_type in ["normal", "tumor", "rna"]:
  if input_type not in config["input"]:
    continue
  for fragment in config["input"][input_type]:
    for read in [1, 2]:
      assert fragment["r%d" % read].endswith("fastq.gz")
      FRAGMENT_IDS[input_type].add(fragment["fragment_id"])
      source = fragment["r%d" % read]
      # if either the .fastq.gz or .fastq files already exist, don't copy anew
      dest = os.path.join(WORKDIR,
        "%s_%s_R%d.fastq.gz" % (input_type, fragment["fragment_id"], read))
      unzipped_dest = os.path.join(WORKDIR,
        "%s_%s_R%d.fastq" % (input_type, fragment["fragment_id"], read))
      if not (os.path.exists(dest) or os.path.exists(unzipped_dest)):
        print('Copying %s to %s' % (source, dest))
        copy2(source, dest)

# merge a bunch of BAMs into one thing
rule merge_normal_aligned_fragments:
  input:
    expand("{{prefix}}_{fragment_id}_aligned_coordinate_sorted.bam",
      fragment_id=FRAGMENT_IDS["normal"])
  output:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  wildcard_constraints:
    prefix=".*normal.*"
  run:
    if len(input) > 1:
      shell("samtools merge {output} {input}")
    else:
      shell("cp {input} {output}")

rule merge_tumor_aligned_fragments:
  input:
    expand("{{prefix}}_{fragment_id}_aligned_coordinate_sorted.bam",
      fragment_id=FRAGMENT_IDS["tumor"])
  output:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  wildcard_constraints:
    prefix=".*tumor.*"
  run:
    if len(input) > 1:
      shell("samtools merge {output} {input}")
    else:
      shell("cp {input} {output}")

rule merge_rna_aligned_fragments:
  input:
    expand("{{prefix}}_{fragment_id}Aligned.sortedByCoord.out.bam",
      fragment_id=FRAGMENT_IDS["rna"])
  output:
    "{prefix}_merged_aligned_coordinate_sorted.bam"
  wildcard_constraints:
    prefix=".*rna.*"
  benchmark:
    "{prefix}_merge_rna_aligned_fragments_benchmark.txt"
  log:
    "{prefix}_merge_rna_aligned_fragments.log"
  threads: 12
  run:
    if len(input) > 1:
      shell("sambamba merge -t {threads} {output} {input} 2> {log}")
    else:
      shell("cp {input} {output}")
