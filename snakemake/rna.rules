"""
This contains RNA processing rules.
"""

import os

READ_LENGTH = 124
STAR_GENOME_DIR = os.path.join(
    os.path.dirname(config["reference"]["genome"]), "star-genome-%d" % READ_LENGTH)

# TODO(julia): run with a benchmark/log, also consider outputting to workdir rather than the input
# for where the reference stuff lives
rule star_align_reference:
  input:
  params:
    size = READ_LENGTH,
    genome_dir = STAR_GENOME_DIR,
    reference = config["reference"]["genome"],
    transcripts = config["reference"]["transcripts"]
  output:
    os.path.join(STAR_GENOME_DIR, "SA")
  threads: _get_half_cores
  run:
    if not os.path.exists(params.genome_dir):
        shell("mkdir {params.genome_dir}")
    shell("""
        STAR \
        --runMode genomeGenerate \
        --genomeDir {params.genome_dir} \
        --genomeFastaFiles {params.reference} \
        --sjdbGTFfile {params.transcripts} \
        --sjdbOverhang {params.size} \
        --runThreadN {threads}
    """)

rule star_align_paired_end_split_fastq_gz:
  input:
    r1 = "{prefix}_R1.fastq.gz",
    r2 = "{prefix}_R2.fastq.gz",
    genome_alignment = rules.star_align_reference.output
  output:
    "{prefix}Aligned.sortedByCoord.out.bam"
  params:
    genome_dir = STAR_GENOME_DIR,
    rg_sm = config["input"]["id"] + "_rna"
  benchmark:
    "{prefix}_star_align_benchmark.txt"
  log:
    "{prefix}_star_align.log"
  threads: _get_half_cores
  shell:
    "STAR "
    "--genomeDir {params.genome_dir} "
    "--runThreadN {threads} "
    "--outSAMtype BAM SortedByCoordinate "
    "--outSAMstrandField intronMotif "
    "--outSAMattributes NH HI NM MD "
    "--outSAMmapqUnique 60 "
    "--outFilterIntronMotifs RemoveNoncanonical "
    "--outSAMattrRGline ID:{wildcards.prefix} SM:'{params.rg_sm}' "
    "--outFileNamePrefix {wildcards.prefix} "
    "--readFilesCommand zcat "
    "--readFilesIn {input.r1} {input.r2} "
    "2> {log}"

rule star_align_single_end_fastq:
  input:
    r = "{prefix}.fastq",
    genome_alignment = rules.star_align_reference.output
  output:
    "{prefix}Aligned.sortedByCoord.out.bam"
  params:
    genome_dir = STAR_GENOME_DIR,
    rg_sm = config["input"]["id"] + "_rna"
  benchmark:
    "{prefix}_star_align_benchmark.txt"
  log:
    "{prefix}_star_align.log"
  threads: _get_half_cores
  shell:
    "STAR "
    "--genomeDir {params.genome_dir} "
    "--runThreadN {threads} "
    "--outSAMtype BAM SortedByCoordinate "
    "--outSAMstrandField intronMotif "
    "--outSAMattributes NH HI NM MD "
    "--outSAMmapqUnique 60 "
    "--outFilterIntronMotifs RemoveNoncanonical "
    "--outSAMattrRGline ID:{wildcards.prefix} SM:'{params.rg_sm}' "
    "--outFileNamePrefix {wildcards.prefix} "
    "--readFilesCommand zcat "
    "--readFilesIn {input.r} "
    "2> {log}"



# then we run mark duplicates on the RNA, which can just reuse the mark_dups rule from gatk.rules

# split the resulting BAM by CIGAR string; only want to do indel realignment on reads that don't
# contain any Ns. This file will contain all reads with Ns
rule filter_n:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_N_filtered.bam"
  benchmark:
    "{prefix}_filter_N_benchmark.txt"
  shell:
    "sambamba view "
    "--format=bam "
    "-F 'cigar =~ /^.*N.*$/' "
    "{input} > {output}"

# This file should contain all reads without Ns
rule filter_other:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered.bam"
  benchmark:
    "{prefix}_split_out_other_benchmark.txt"
  shell:
    "sambamba view "
    "--format=bam "
    "-F 'cigar =~ /^[0-9MIDSHPX=]*$/' "
    "{input} > {output}"

# apparently this also creates an index file? awesome
rule sort_rna_bam:
  input:
    "{prefix}.bam"
  output:
    bam = "{prefix}_sorted.bam"
  threads: _get_half_cores
  benchmark:
    "{prefix}_sort_benchmark.txt"
  log:
    "{prefix}_sort.log"
  shell:
    "sambamba sort -t {threads} -m 4GB "
    "--tmpdir {wildcards.prefix}_sort_tmp "
    "-o {output.bam} "
    "{input} "
    "2> {log}"

CHR = list(range(1, 23)) + ['X', 'Y', 'MT']

# run per-chromosome indel realignment on the reads without Ns
rule rna_indel_realigner_target_creator_per_chr:
  input:
    "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam"
  output:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.intervals"
  params:
    reference = config["reference"]["genome"]
  benchmark:
    "{prefix}/rna_indel_realigner_target_creator_{chr}_benchmark.txt"
  log:
    "{prefix}/rna_indel_realigner_target_creator_{chr}.log"
  threads: _get_half_cores
  resources:
    mem_mb = 20000
  shell:
    "gatk -Xmx20g -T RealignerTargetCreator -R {params.reference} "
    "--intervals {wildcards.chr} "
    "-I {input} -o {output} -nt {threads} "
    "--filter_mismatching_base_and_quals --filter_bases_not_stored "
    "2> {log}"

rule rna_indel_realigner_per_chr:
  input:
    bam = "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam",
    intervals = "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.intervals"
  output:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.bam"
  params:
    reference = config["reference"]["genome"]
  benchmark:
    "{prefix}/rna_indel_realigner_{chr}_benchmark.txt"
  log:
    "{prefix}/rna_indel_realigner_{chr}.log"
  resources:
    mem_mb = 20000
  shell:
    "gatk -Xmx20g -T IndelRealigner -compress 0 -R {params.reference} -I {input.bam} "
    "-targetIntervals {input.intervals} --intervals {wildcards.chr} -o {output} "
    "--filter_mismatching_base_and_quals --filter_bases_not_stored "
    "2> {log}"

rule rna_indel_realigner_merge:
  input:
    expand("{{prefix}}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.bam", chr=CHR)
  output:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal.bam"
  benchmark:
    "{prefix}/rna_indel_realigner_merge_benchmark.txt"
  shell:
    "sambamba merge {output} {input}"

rule merge_all_rna:
  input:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal.bam",
    "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_N_filtered_sorted.bam"
  output:
    "{prefix}/rna_final.bam"
  benchmark:
    "{prefix}/rna_final_merge_benchmark.txt"
  shell:
    "sambamba merge {output} {input}"
