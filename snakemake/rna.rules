"""
This contains RNA processing rules.
"""

import os

READ_LENGTH = 124
STAR_GENOME_DIR = os.path.join(
    os.path.dirname(config["reference"]["genome"]), "star-genome-%d" % READ_LENGTH)

# TODO(julia): run with a benchmark/log, also consider outputting to workdir rather than the input
# for where the reference stuff lives
rule star_align_reference:
  input:
    reference = config["reference"]["genome"],
    transcripts = config["reference"]["transcripts"]
  params:
    size = READ_LENGTH,
    genome_dir = STAR_GENOME_DIR
  output:
    os.path.join(STAR_GENOME_DIR, "SA")
  threads: 12
  run:
    if not os.path.exists(params.genome_dir):
        shell("mkdir {params.genome_dir}")
    shell("""
        STAR \
        --runMode genomeGenerate \
        --genomeDir {params.genome_dir} \
        --genomeFastaFiles {input.reference} \
        --sjdbGTFfile {input.transcripts} \
        --sjdbOverhang {params.size} \
        --runThreadN {threads}
    """)

rule star_align:
  input:
    r1 = "{prefix}_R1.fastq",
    r2 = "{prefix}_R2.fastq",
    genome_alignment = rules.star_align_reference.output
  output:
    "{prefix}Aligned.sortedByCoord.out.bam"
  params:
    genome_dir = STAR_GENOME_DIR,
    rg_sm = config["input"]["id"] + "_rna"
  benchmark:
    "{prefix}_star_align_benchmark.txt"
  log:
    "{prefix}_star_align.log"
  threads: 12
  shell:
    "STAR "
    "--genomeDir {params.genome_dir} "
    "--runThreadN {threads} "
    "--outSAMtype BAM SortedByCoordinate "
    "--outSAMstrandField intronMotif "
    "--outSAMattributes NH HI NM MD "
    "--outSAMmapqUnique 60 "
    "--outFilterIntronMotifs RemoveNoncanonical "
    "--outSAMattrRGline ID:{wildcards.prefix} SM:'{params.rg_sm}' "
    "--outFileNamePrefix {wildcards.prefix} "
    "--readFilesIn {input.r1} {input.r2} "
    "2> {log}"

# then we run mark duplicates on the RNA, which can just reuse the mark_dups rule from gatk.rules

# split the resulting BAM by CIGAR string; only want to do indel realignment on reads that don't
# contain any Ns
rule filter_n:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_n_filtered.bam"
  benchmark:
    "{prefix}_split_out_n_benchmark.txt"
  shell:
    "sambamba view "
    "--format=bam "
    "-F 'cigar =~ /^.*N.*$/' "
    "{input} > {output}"

rule filter_other:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered.bam"
  benchmark:
    "{prefix}_split_out_other_benchmark.txt"
  shell:
    "sambamba view "
    "--format=bam "
    "-F 'cigar =~ /^[0-9MIDSHPX=]*$/' "
    "{input} > {output}"

rule sort_filter_other:
  input:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam"
  threads: 12
  benchmark:
    "{prefix}_sort_filter_other_benchmark.txt"
  log:
    "{prefix}_sort_filter_other.log"
  shell:
    "sambamba sort -t {threads}  "
    "--tmpdir {wildcards.prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered "
    "-o {output} "
    "{input} "
    "2> {log}"

# TODO(julia): make a generic index rule using sambamba
rule index_rna:
  input:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam.bai"
  threads: 12
  benchmark:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted_index_benchmark.txt"
  log:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted_index.log"
  shell:
    "sambamba index -t {threads} {input} {output} 2> {log}"
