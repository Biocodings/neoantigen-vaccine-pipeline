"""
This contains RNA processing rules.
"""

import os

# STAR aligner only works with zipped FASTQs
rule gzip:
  input:
    "{prefix}.fastq"
  output:
    "{prefix}.fastq.gz"
  shell:
    "gzip -c {input} > {output}"

rule star_align_paired_end_split_fastq_gz:
  input:
    r1 = "{prefix}_R1.fastq.gz",
    r2 = "{prefix}_R2.fastq.gz",
    genome_alignment = rules.star_align_reference.output
  output:
    "{prefix}Aligned.sortedByCoord.out.bam"
  params:
    genome_dir = _STAR_GENOME_DIR,
    rg_sm = config["input"]["id"] + "_rna"
  benchmark:
    "{prefix}_star_align_benchmark.txt"
  log:
    "{prefix}_star_align.log"
  threads: _get_half_cores
  shell:
    "STAR "
    "--genomeDir {params.genome_dir} "
    "--runThreadN {threads} "
    "--outSAMtype BAM SortedByCoordinate "
    "--outSAMstrandField intronMotif "
    "--outSAMattributes NH HI NM MD "
    "--outSAMmapqUnique 60 "
    "--outFilterIntronMotifs RemoveNoncanonical "
    "--outSAMattrRGline ID:{wildcards.prefix} SM:'{params.rg_sm}' "
    "--outFileNamePrefix {wildcards.prefix} "
    "--readFilesCommand zcat "
    "--readFilesIn {input.r1} {input.r2} "
    "2> {log}"

rule star_align_single_end_fastq:
  input:
    r = "{prefix}.fastq.gz",
    genome_alignment = rules.star_align_reference.output
  output:
    "{prefix}Aligned.sortedByCoord.out.bam"
  params:
    genome_dir = _STAR_GENOME_DIR,
    rg_sm = config["input"]["id"] + "_rna"
  benchmark:
    "{prefix}_star_align_benchmark.txt"
  log:
    "{prefix}_star_align.log"
  threads: _get_half_cores
  shell:
    "STAR "
    "--genomeDir {params.genome_dir} "
    "--runThreadN {threads} "
    "--outSAMtype BAM SortedByCoordinate "
    "--outSAMstrandField intronMotif "
    "--outSAMattributes NH HI NM MD "
    "--outSAMmapqUnique 60 "
    "--outFilterIntronMotifs RemoveNoncanonical "
    "--outSAMattrRGline ID:{wildcards.prefix} SM:'{params.rg_sm}' "
    "--outFileNamePrefix {wildcards.prefix} "
    "--readFilesCommand zcat "
    "--readFilesIn {input.r} "
    "2> {log}"

# then we run mark duplicates on the RNA, which can just reuse the mark_dups rule from gatk.rules

# split the resulting BAM by CIGAR string; only want to do indel realignment on reads that don't
# contain any Ns. This file will contain all reads with Ns
rule filter_n:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_N_filtered.bam"
  benchmark:
    "{prefix}_filter_N_benchmark.txt"
  shell:
    "sambamba view "
    "--format=bam "
    "-F 'cigar =~ /^.*N.*$/' "
    "{input} > {output}"

# This file should contain all reads without Ns
rule filter_other:
  input:
    "{prefix}_aligned_coordinate_sorted_dups.bam"
  output:
    "{prefix}_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered.bam"
  benchmark:
    "{prefix}_split_out_other_benchmark.txt"
  shell:
    "sambamba view "
    "--format=bam "
    "-F 'cigar =~ /^[0-9MIDSHPX=]*$/' "
    "{input} > {output}"

# apparently this also creates an index file? awesome
rule sort_rna_bam:
  input:
    "{prefix}.bam"
  output:
    bam = "{prefix}_sorted.bam"
  threads: _get_half_cores
  benchmark:
    "{prefix}_sort_benchmark.txt"
  log:
    "{prefix}_sort.log"
  shell:
    "sambamba sort -t {threads} -m 4GB "
    "--tmpdir {wildcards.prefix}_sort_tmp "
    "-o {output.bam} "
    "{input} "
    "2> {log}"

# run indel realignment on the reads without Ns

# if this rule is triggered with "chr" mapping to a chromosome in the _CHR list, it'll be run
# for that chromosome alone. If "chr" matches any other string, IndelRealigner will run for all
# chromosomes.
rule rna_indel_realigner_target_creator_per_chr:
  input:
    "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam.bai",
    rna = "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam",
    reference_fai = rules.samtools_index_reference.output,
    reference_dict = rules.picard_sequence_dict_reference.output,
    reference = config["reference"]["genome"]
  output:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.intervals"
  threads: _get_half_cores
  benchmark:
    "{prefix}/rna_indel_realigner_target_creator_{chr}_benchmark.txt"
  log:
    "{prefix}/rna_indel_realigner_target_creator_{chr}.log"
  resources:
    mem_mb = 20000
  run:
    intervals_str = _get_intervals_str(wildcards)
    shell("""
      gatk -Xmx20g -T RealignerTargetCreator -R {input.reference} \
      %s \
      -I {input.rna} -o {output} -nt {threads} \
      --filter_mismatching_base_and_quals --filter_bases_not_stored \
      2> {log}
    """ % intervals_str)

rule rna_indel_realigner_per_chr:
  input:
    bam = "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam",
    intervals = "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.intervals",
    reference = config["reference"]["genome"]
  output:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_{chr}.bam"
  benchmark:
    "{prefix}/rna_indel_realigner_{chr}_benchmark.txt"
  log:
    "{prefix}/rna_indel_realigner_{chr}.log"
  resources:
    mem_mb = 20000
  run:
    intervals_str = _get_intervals_str(wildcards)
    shell("""
      gatk -Xmx20g -T IndelRealigner -compress 0 -R {input.reference} -I {input.bam} \
      -targetIntervals {input.intervals} %s -o {output} \
      --filter_mismatching_base_and_quals --filter_bases_not_stored \
      2> {log}
    """ % intervals_str)

def _get_rna_indel_realigner_input(wildcards):
  if _PARALLEL_INDEL_REALIGNER:
    return ["%s/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_chr_%s.bam" % (
      wildcards.prefix, chromosome) for chromosome in _CHR]
  else:
    return "%s/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal_chr_ALL.bam" % wildcards.prefix

rule rna_indel_realigner:
  input:
    _get_rna_indel_realigner_input
  output:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal.bam"
  benchmark:
    "{prefix}/rna_indel_realigner_benchmark.txt"
  log:
    "{prefix}/rna_indel_realigner.log"
  run:
    if _PARALLEL_INDEL_REALIGNER:
      shell("sambamba merge {output} {input}")
    else:
      shell("mv {input} {output}")

rule merge_all_rna:
  input:
    "{prefix}/rna_cigar_0-9MIDSHPX_filtered_sorted_indelreal.bam",
    "{prefix}/rna_aligned_coordinate_sorted_dups_cigar_N_filtered_sorted.bam"
  output:
    "{prefix}/rna_final.bam"
  benchmark:
    "{prefix}/rna_final_merge_benchmark.txt"
  shell:
    "sambamba merge {output} {input}"
