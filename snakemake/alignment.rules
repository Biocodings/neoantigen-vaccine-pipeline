"""
This contains alignment-related processing rules.
"""

def get_rg(wildcards):
  prefix = wildcards.prefix
  basename = os.path.basename(prefix)
  if basename.startswith("normal"):
    sm = "normal"
  elif basename.startswith("tumor"):
    sm = "tumor"
  else:
    raise ValueError("Unexpected prefix, cannot extract SM tag: %s" % prefix)
  return "@RG\\tID:{prefix}.bam\\tSM:{sample_id}_{sm}\\tLB:ga\\tPL:Illumina".format(
    prefix=prefix, sample_id=config["input"]["id"], sm=sm)

rule bwa_mem_starting_bam:
  input:
    "{prefix}_read_name_sorted.fastq"
  output:
    "{prefix}_aligned.sam"
  params:
    rg = get_rg,
    reference = config["reference"]["genome"]
  benchmark:
    "{prefix}_bwa_mem_benchmark.txt"
  log:
    "{prefix}_bwa_mem.log"
  threads: 12
  shell:
    "bwa mem -R '{params.rg}' -M -t {threads} -p -O 6 -E 1 -B 4 {params.reference} {input} "
    "> {output} 2> {log}"

rule bwa_mem_starting_fastq:
  input:
    r1 = "{prefix}_R1.fastq.gz",
    r2 = "{prefix}_R2.fastq.gz"
  output:
    "{prefix}_aligned.sam"
  params:
    rg = get_rg,
    reference = config["reference"]["genome"]
  benchmark:
    "{prefix}_bwa_mem_benchmark.txt"
  log:
    "{prefix}_bwa_mem.log"
  threads: 12
  shell:
    "bwa mem -R '{params.rg}' -M -t {threads} -O 6 -E 1 -B 4 "
    "{params.reference} {input.r1} {input.r2} "
    "> {output} 2> {log}"

rule convert_alignment_to_sorted_bam:
  input:
    "{prefix}_aligned.sam"
  output:
    "{prefix}_aligned_coordinate_sorted.bam"
  benchmark:
    "{prefix}_convert_alignment_to_sorted_bam_benchmark.txt"
  log:
    "{prefix}_convert_alignment_to_sorted_bam.log"
  shell:
    "picard -Xmx20g SortSam INPUT={input} OUTPUT={output} SORT_ORDER=coordinate 2> {log}"
