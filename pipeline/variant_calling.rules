# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# run a separate mutect task for each chromosome
# TODO(julia): need a better solution for running Java 1.7, for now hard-coding the path to that
# Java version as well as to the downloaded MuTect jar on PGVNode
rule mutect_per_chr:
  input:
    normal = "{prefix}/normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    tumor = "{prefix}/tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    reference = config["reference"]["genome"],
    cosmic = config["reference"]["cosmic"],
    dbsnp = config["reference"]["dbsnp"]
  output:
    "{prefix}/mutect_{chr}.vcf"
  benchmark:
    "{prefix}/mutect_{chr}_benchmark.txt"
  log:
    "{prefix}/mutect_{chr}.log"
  resources:
    mem_mb = 2000
  shell:
    "$JAVA7_BIN/java -Xmx2g -jar $MUTECT "
    "--analysis_type MuTect "
    "--reference_sequence {input.reference} "
    "--cosmic {input.cosmic} "
    "--dbsnp {input.dbsnp} "
    "--intervals {wildcards.chr} "
    "--input_file:normal {input.normal} "
    "--input_file:tumor {input.tumor} "
    "--out {output}.out "
    "--vcf {output} "
    "--coverage_file {output}_coverage.wig "
    "2> {log}"

# is it okay to use vcf-concat and not vcf-merge?
rule mutect:
  input:
    expand("{{prefix}}/mutect_{chr}.vcf", chr=config["contigs"])
  output:
    "{prefix}/mutect.vcf"
  shell:
    "vcf-concat {input} > {output}"

rule mutect2_per_chr:
  input:
    normal = "{prefix}/normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    tumor = "{prefix}/tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    reference = config["reference"]["genome"],
    cosmic = config["reference"]["cosmic"],
    dbsnp = config["reference"]["dbsnp"]
  output:
    "{prefix}/mutect2_{chr}.vcf"
  benchmark:
    "{prefix}/mutect2_{chr}_benchmark.txt"
  log:
    "{prefix}/mutect2_{chr}.log"
  shell:
    "gatk -T MuTect2 "
    "-I:normal {input.normal} "
    "-I:tumor {input.tumor} "
    "-R {input.reference} "
    "--dbsnp {input.dbsnp} "
    "--cosmic {input.cosmic} "
    "--intervals {wildcards.chr} "
    "-o {output} "
    "2> {log}"

rule mutect2:
  input:
    expand("{{prefix}}/mutect2_{chr}.vcf", chr=config["contigs"])
  output:
    "{prefix}/mutect2.vcf"
  shell:
    "vcf-concat {input} > {output}"

# TODO(julia): the logs here print to stdout still, need to figure out what the logs are coming from
# and print to the logfile instead
#
# If not running in a Docker image, user must have these environment variables set:
# - STRELKA_BIN: directory of Strelka installation, must contain configureStrelkaWorkflow.pl
# - STRELKA_CONFIG: path to Strelka config file
rule strelka:
  input:
    normal = "{prefix}/normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    tumor = "{prefix}/tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    reference = config["reference"]["genome"]
  output:
    "{prefix}/strelka_output/results/passed.somatic.snvs.vcf",
    "{prefix}/strelka_output/results/passed.somatic.indels.vcf"
  params:
    output_dir = "{prefix}/strelka_output"
  benchmark:
    "{prefix}/strelka_benchmark.txt"
  log:
    "{prefix}/strelka.log"
  threads: 20
  shell:
    "rm -rf {params.output_dir}; "
    "$STRELKA_BIN/configureStrelkaWorkflow.pl "
    "--normal {input.normal} "
    "--tumor {input.tumor} "
    "--ref {input.reference} "
    "--config $STRELKA_CONFIG "
    "--output-dir {params.output_dir} &> {log}; "
    "cd {params.output_dir}; "
    "make -j {threads} "
    ">> {log} 2>&1"

rule strelka_combine:
  input:
    snvs = "{prefix}/strelka_output/results/passed.somatic.snvs.vcf",
    indels = "{prefix}/strelka_output/results/passed.somatic.indels.vcf",
    reference = config["reference"]["genome"]
  output:
    "{prefix}/strelka.vcf"
  benchmark:
    "{prefix}/strelka_combine_benchmark.txt"
  log:
    "{prefix}/strelka_combine.log"
  shell:
    "gatk -T CombineVariants "
    "--variant:snvs {input.snvs} "
    "--variant:indels {input.indels} "
    "-R {input.reference} "
    "-genotypeMergeOptions PRIORITIZE "
    "-o {output} "
    "-priority snvs,indels "
    "2> {log}"

rule haplotype_caller_per_chr:
  input:
    normal = "{prefix}/normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam",
    reference = config["reference"]["genome"],
    dbsnp = config["reference"]["dbsnp"]
  output:
    "{prefix}/normal_germline_snps_indels_{chr}.vcf"
  benchmark:
    "{prefix}/haplotype_caller_benchmark_{chr}.txt"
  log:
    "{prefix}/haplotype_caller_{chr}.log"
  shell:
    "gatk -T HaplotypeCaller "
    "-R {input.reference} "
    "-I {input.normal} "
    "--dbsnp {input.dbsnp} "
    "--intervals {wildcards.chr} "
    "-o {output} "
    ">> {log} 2>&1"

rule haplotype_caller:
  input:
    expand("{{prefix}}/normal_germline_snps_indels_{chr}.vcf", chr=config["contigs"])
  output:
    "{prefix}/normal_germline_snps_indels.vcf"
  shell:
    "vcf-concat {input} > {output}"

rule extract_snps:
  input:
    reference = config["reference"]["genome"],
    all_germline_variants = "{prefix}/normal_germline_snps_indels.vcf"
  output:
    "{prefix}/normal_germline_snps.vcf"
  benchmark:
    "{prefix}/extract_snps_benchmark.txt"
  log:
    "{prefix}/extract_snps.log"
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {input.reference} "
    "-V {input.all_germline_variants} "
    "-selectType SNP "
    "-o {output} "
    ">> {log} 2>&1"

# Filters recommended at https://software.broadinstitute.org/gatk/documentation/article.php?id=2806
rule filter_snps:
  input:
    reference = config["reference"]["genome"],
    germline_snps = "{prefix}/normal_germline_snps.vcf"
  output:
    "{prefix}/filtered_normal_germline_snps.vcf"
  benchmark:
    "{prefix}/filter_snps_benchmark.txt"
  log:
    "{prefix}/filter_snps.log"
  shell:
    "gatk " 
    "-T VariantFiltration "
    "-R {input.reference} "
    "-V {input.germline_snps} "
    "--filterExpression \"QD < 2.0 || FS > 60.0 || MQ < 40.0 || SOR > 3.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0\" "
    "--filterName \"gatk_snp_filter\" "
    "-o {output} "
    ">> {log} 2>&1"

rule extract_indels:
  input:
    reference = config["reference"]["genome"],
    all_germline_variants = "{prefix}/normal_germline_snps_indels.vcf"
  output:
    "{prefix}/normal_germline_indels.vcf"
  benchmark:
    "{prefix}/extract_indels_benchmark.txt"
  log:
    "{prefix}/extract_indels.log"
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {input.reference} "
    "-V {input.all_germline_variants} "
    "-selectType INDEL "
    "-o {output} "
    ">> {log} 2>&1"

# Filters recommended at https://software.broadinstitute.org/gatk/documentation/article.php?id=2806
rule filter_indels:
  input:
    reference = config["reference"]["genome"],
    germline_indels = "{prefix}/normal_germline_indels.vcf"
  output:
    "{prefix}/filtered_normal_germline_indels.vcf"
  benchmark:
    "{prefix}/filter_indels_benchmark.txt"
  log:
    "{prefix}/filter_indels.log"
  shell:
    "gatk " 
    "-T VariantFiltration "
    "-R {input.reference} "
    "-V {input.germline_indels} "
    "--filterExpression \"QD < 2.0 || FS > 200.0 || SOR > 10.0 || ReadPosRankSum < -20.0\" "
    "--filterName \"gatk_indel_filter\" "
    "-o {output} "
    ">> {log} 2>&1"

rule combine_germline_variants:
  input:
    expand("{{prefix}}/filtered_normal_germline_{var}.vcf", var=["snps", "indels"])
  output:
    "{prefix}/filtered_normal_germline_snps_indels.vcf"
  shell:
    "vcf-concat {input} > {output}"

if "capture_kit_coverage_file" in config["reference"]:
  rule intersect_with_coverage_file:
    input:
      coverage_file = config["reference"]["capture_kit_coverage_file"],
      germline_variants = "{prefix}/filtered_normal_germline_snps_indels.vcf"
    output:
      "{prefix}/filtered_covered_normal_germline_snps_indels.vcf"
    shell:
      "bedtools intersect -a {input.germline_variants} -b {input.coverage_file} -header > {output}"
